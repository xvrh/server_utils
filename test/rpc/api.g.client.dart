// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// RpcClientGenerator
// **************************************************************************

// GENERATED-CODE: do not edit
// This code is generated by the rpc_builder tool

import 'dart:convert';
import 'package:http/http.dart';
import 'package:path/path.dart' as path_helper;
import 'package:server_utils/rpc_client.dart';
import 'api.dart' show News, MoveType, Page;

class NewsController {
  final Client _client;
  final String _basePath;

  NewsController(this._client, {required String basePath})
      : _basePath = basePath;

  void close() => _client.close();

  Future<String> simpleString() async {
    var $url =
        Uri.parse(path_helper.url.join(_basePath, 'news', 'simpleString'));
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return $decodedResponse! as String;
  }

  Future<String> greeting(String name) async {
    var $url = Uri.parse(path_helper.url.join(_basePath, 'news', 'greeting'));
    $url = $url.replace(queryParameters: {
      'name': name,
    });
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return $decodedResponse! as String;
  }

  Future<String> greetingWithNamed(String name,
      {String? prefix, String? suffix}) async {
    var $url =
        Uri.parse(path_helper.url.join(_basePath, 'news', 'greetingWithNamed'));
    $url = $url.replace(queryParameters: {
      'name': name,
      if (prefix != null) 'prefix': prefix,
      if (suffix != null) 'suffix': suffix,
    });
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return $decodedResponse! as String;
  }

  Future<String> greetingWithRequired({required int count}) async {
    var $url = Uri.parse(
        path_helper.url.join(_basePath, 'news', 'greetingWithRequired'));
    $url = $url.replace(queryParameters: {
      'count': count.toString(),
    });
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return $decodedResponse! as String;
  }

  Future<String> allTypes(
      {int? aInt,
      required int requiredInt,
      bool? aBool,
      required bool requiredBool,
      num? aNum,
      required num requiredNum,
      double? aDouble,
      required double requiredDouble,
      String? aString,
      required String requiredString,
      DateTime? aDate,
      required DateTime requiredDate}) async {
    var $url = Uri.parse(path_helper.url.join(_basePath, 'news', 'allTypes'));
    $url = $url.replace(queryParameters: {
      if (aInt != null) 'aInt': aInt.toString(),
      'requiredInt': requiredInt.toString(),
      if (aBool != null) 'aBool': aBool.toString(),
      'requiredBool': requiredBool.toString(),
      if (aNum != null) 'aNum': aNum.toString(),
      'requiredNum': requiredNum.toString(),
      if (aDouble != null) 'aDouble': aDouble.toString(),
      'requiredDouble': requiredDouble.toString(),
      if (aString != null) 'aString': aString,
      'requiredString': requiredString,
      if (aDate != null) 'aDate': aDate.toString(),
      'requiredDate': requiredDate.toString(),
    });
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return $decodedResponse! as String;
  }

  Future<String> getList(
      List<int> ints, List<bool> bools, List<String> strings) async {
    var $url = Uri.parse(path_helper.url.join(_basePath, 'news', 'getList'));
    $url = $url.replace(queryParameters: {
      'ints': jsonEncode(ints),
      'bools': jsonEncode(bools),
      'strings': jsonEncode(strings),
    });
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return $decodedResponse! as String;
  }

  Future<String> getListNullableValue(
      List<int?> ints, List<bool?> bools, List<String?> strings) async {
    var $url = Uri.parse(
        path_helper.url.join(_basePath, 'news', 'getListNullableValue'));
    $url = $url.replace(queryParameters: {
      'ints': jsonEncode(ints),
      'bools': jsonEncode(bools),
      'strings': jsonEncode(strings),
    });
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return $decodedResponse! as String;
  }

  Future<String> getListNullable(
      List<int?>? ints, List<bool?>? bools, List<String?>? strings) async {
    var $url =
        Uri.parse(path_helper.url.join(_basePath, 'news', 'getListNullable'));
    $url = $url.replace(queryParameters: {
      if (ints != null) 'ints': jsonEncode(ints),
      if (bools != null) 'bools': jsonEncode(bools),
      if (strings != null) 'strings': jsonEncode(strings),
    });
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return $decodedResponse! as String;
  }

  Future<String> getMap(Map<String, int> ints, Map<String, bool> bools,
      Map<String, String> strings) async {
    var $url = Uri.parse(path_helper.url.join(_basePath, 'news', 'getMap'));
    $url = $url.replace(queryParameters: {
      'ints': jsonEncode(ints),
      'bools': jsonEncode(bools),
      'strings': jsonEncode(strings),
    });
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return $decodedResponse! as String;
  }

  Future<String> postList(
      List<int> ints, List<bool> bools, List<String> strings) async {
    var $url = Uri.parse(path_helper.url.join(_basePath, 'news', 'postList'));
    var $response = await _client.post($url,
        body: jsonEncode({
          'ints': ints,
          'bools': bools,
          'strings': strings,
        }));
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return $decodedResponse! as String;
  }

  Future<String> postMap(Map<String, int> ints, Map<String, bool> bools,
      Map<String, String> strings) async {
    var $url = Uri.parse(path_helper.url.join(_basePath, 'news', 'postMap'));
    var $response = await _client.post($url,
        body: jsonEncode({
          'ints': ints,
          'bools': bools,
          'strings': strings,
        }));
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return $decodedResponse! as String;
  }

  Future<List<News>> lastNews({int? count}) async {
    var $url = Uri.parse(path_helper.url.join(_basePath, 'news', 'lastNews'));
    $url = $url.replace(queryParameters: {
      if (count != null) 'count': count.toString(),
    });
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return ($decodedResponse! as List<Object?>)
        .map((i) => News.fromJson(i! as Map<String, Object?>))
        .toList();
  }

  Future<News> echo(News news) async {
    var $url = Uri.parse(path_helper.url.join(_basePath, 'news', 'echo'));
    var $response = await _client.post($url,
        body: jsonEncode({
          'news': news.toJson(),
        }));
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return News.fromJson($decodedResponse! as Map<String, Object?>);
  }

  Future<List<News>> sendReceiveNewsPost(List<News> news) async {
    var $url = Uri.parse(
        path_helper.url.join(_basePath, 'news', 'sendReceiveNewsPost'));
    var $response = await _client.post($url,
        body: jsonEncode({
          'news': news.map((i) => i.toJson()).toList(),
        }));
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return ($decodedResponse! as List<Object?>)
        .map((i) => News.fromJson(i! as Map<String, Object?>))
        .toList();
  }

  Future<List<News>> sendReceiveNewsGet(List<News> news) async {
    var $url = Uri.parse(
        path_helper.url.join(_basePath, 'news', 'sendReceiveNewsGet'));
    $url = $url.replace(queryParameters: {
      'news': jsonEncode(news.map((i) => i.toJson()).toList()),
    });
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return ($decodedResponse! as List<Object?>)
        .map((i) => News.fromJson(i! as Map<String, Object?>))
        .toList();
  }

  Future<Map<String, News>> sendReceiveMapNewsPost(
      Map<String, News> news) async {
    var $url = Uri.parse(
        path_helper.url.join(_basePath, 'news', 'sendReceiveMapNewsPost'));
    var $response = await _client.post($url,
        body: jsonEncode({
          'news': news.map((k, v) => MapEntry(k, v.toJson())),
        }));
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return ($decodedResponse! as Map<String, Object?>)
        .map((k, v) => MapEntry(k, News.fromJson(v! as Map<String, Object?>)));
  }

  Future<Map<String, News>> sendReceiveMapNewsGet(
      Map<String, News> news) async {
    var $url = Uri.parse(
        path_helper.url.join(_basePath, 'news', 'sendReceiveMapNewsGet'));
    $url = $url.replace(queryParameters: {
      'news': jsonEncode(news.map((k, v) => MapEntry(k, v.toJson()))),
    });
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return ($decodedResponse! as Map<String, Object?>)
        .map((k, v) => MapEntry(k, News.fromJson(v! as Map<String, Object?>)));
  }

  Future<List<String>> getListString() async {
    var $url =
        Uri.parse(path_helper.url.join(_basePath, 'news', 'getListString'));
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return ($decodedResponse! as List<Object?>)
        .map((i) => i! as String)
        .toList();
  }

  Future<List<String>> getListStringPost() async {
    var $url =
        Uri.parse(path_helper.url.join(_basePath, 'news', 'getListStringPost'));
    var $response = await _client.post($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return ($decodedResponse! as List<Object?>)
        .map((i) => i! as String)
        .toList();
  }

  Future<List<bool>> getListBool() async {
    var $url =
        Uri.parse(path_helper.url.join(_basePath, 'news', 'getListBool'));
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return ($decodedResponse! as List<Object?>).map((i) => i! as bool).toList();
  }

  Future<List<bool>> getListBoolPost() async {
    var $url =
        Uri.parse(path_helper.url.join(_basePath, 'news', 'getListBoolPost'));
    var $response = await _client.post($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return ($decodedResponse! as List<Object?>).map((i) => i! as bool).toList();
  }

  Future<void> aVoid(int id) async {
    var $url = Uri.parse(path_helper.url.join(_basePath, 'news', 'aVoid'));
    var $response = await _client.post($url,
        body: jsonEncode({
          'id': id,
        }));
    checkResponseSuccess($url, $response);
  }

  Future<bool> returnBool() async {
    var $url = Uri.parse(path_helper.url.join(_basePath, 'news', 'returnBool'));
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return $decodedResponse! as bool;
  }

  Future<num> returnNum() async {
    var $url = Uri.parse(path_helper.url.join(_basePath, 'news', 'returnNum'));
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return $decodedResponse! as num;
  }

  Future<double> returnDouble() async {
    var $url =
        Uri.parse(path_helper.url.join(_basePath, 'news', 'returnDouble'));
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return ($decodedResponse! as num).toDouble();
  }

  Future<int> returnInt() async {
    var $url = Uri.parse(path_helper.url.join(_basePath, 'news', 'returnInt'));
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return ($decodedResponse! as num).toInt();
  }

  Future<DateTime> returnDateTime() async {
    var $url =
        Uri.parse(path_helper.url.join(_basePath, 'news', 'returnDateTime'));
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return DateTime.parse($decodedResponse! as String);
  }

  Future<List<DateTime>> returnListDateTime() async {
    var $url = Uri.parse(
        path_helper.url.join(_basePath, 'news', 'returnListDateTime'));
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return ($decodedResponse! as List<Object?>)
        .map((i) => DateTime.parse(i! as String))
        .toList();
  }

  Future<List<DateTime>> returnFutureListDateTime() async {
    var $url = Uri.parse(
        path_helper.url.join(_basePath, 'news', 'returnFutureListDateTime'));
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return ($decodedResponse! as List<Object?>)
        .map((i) => DateTime.parse(i! as String))
        .toList();
  }

  Future<List<MoveType?>> echoEnum(MoveType type1, {MoveType? type2}) async {
    var $url = Uri.parse(path_helper.url.join(_basePath, 'news', 'echoEnum'));
    $url = $url.replace(queryParameters: {
      'type1': type1.toString(),
      if (type2 != null) 'type2': type2.toString(),
    });
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return ($decodedResponse! as List<Object?>)
        .map((i) => apiUtils.enumFrom(i as String?, MoveType.values))
        .toList();
  }

  Future<Page<News>> getPage() async {
    var $url = Uri.parse(path_helper.url.join(_basePath, 'news', 'getPage'));
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return Page<News>.fromJson(
      $decodedResponse! as Map<String, Object?>,
      contentReviver: (d) => News.fromJson(d! as Map<String, Object?>),
    );
  }

  Future<Map<String, Page<News>>> getPagesMap() async {
    var $url =
        Uri.parse(path_helper.url.join(_basePath, 'news', 'getPagesMap'));
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return ($decodedResponse! as Map<String, Object?>).map((k, v) => MapEntry(
        k,
        Page<News>.fromJson(
          v! as Map<String, Object?>,
          contentReviver: (d) => News.fromJson(d! as Map<String, Object?>),
        )));
  }

  Future<List<Page<News>>> getPagesList() async {
    var $url =
        Uri.parse(path_helper.url.join(_basePath, 'news', 'getPagesList'));
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return ($decodedResponse! as List<Object?>)
        .map((i) => Page<News>.fromJson(
              i! as Map<String, Object?>,
              contentReviver: (d) => News.fromJson(d! as Map<String, Object?>),
            ))
        .toList();
  }

  Future<bool> throwAnError() async {
    var $url =
        Uri.parse(path_helper.url.join(_basePath, 'news', 'throwAnError'));
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return $decodedResponse! as bool;
  }

  Future<List<int?>> echoList(List<int?> list) async {
    var $url = Uri.parse(path_helper.url.join(_basePath, 'news', 'echoList'));
    $url = $url.replace(queryParameters: {
      'list': jsonEncode(list),
    });
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return ($decodedResponse! as List<Object?>)
        .map((i) => (i as num?)?.toInt())
        .toList();
  }

  Future<Map<String?, int?>> echoMap(Map<String?, int?> map) async {
    var $url = Uri.parse(path_helper.url.join(_basePath, 'news', 'echoMap'));
    $url = $url.replace(queryParameters: {
      'map': jsonEncode(map),
    });
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return ($decodedResponse! as Map<String, Object?>)
        .map((k, v) => MapEntry(k, (v as num?)?.toInt()));
  }

  Future<List<int?>?> echoListNullable(List<int?>? list) async {
    var $url =
        Uri.parse(path_helper.url.join(_basePath, 'news', 'echoListNullable'));
    $url = $url.replace(queryParameters: {
      if (list != null) 'list': jsonEncode(list),
    });
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return ($decodedResponse as List<Object?>?)
        ?.map((i) => (i as num?)?.toInt())
        .toList();
  }

  Future<Map<String?, int?>?> echoMapNullable(Map<String?, int?>? map) async {
    var $url =
        Uri.parse(path_helper.url.join(_basePath, 'news', 'echoMapNullable'));
    $url = $url.replace(queryParameters: {
      if (map != null) 'map': jsonEncode(map),
    });
    var $response = await _client.get($url);
    checkResponseSuccess($url, $response);
    var $decodedResponse = jsonDecode($response.body);
    return ($decodedResponse as Map<String, Object?>?)
        ?.map((k, v) => MapEntry(k, (v as num?)?.toInt()));
  }
}
